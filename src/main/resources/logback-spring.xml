<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration>
<configuration>
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

    <springProperty name="service" source="logging.service" defalutValue="UNKNOWN"/>
    <springProperty name="appName" source="spring.application.name" defaultValue="UNKNOWN" scope="system" />

    <springProfile name="dev, local">
        <property name="spring-profile" value="DEV" scope="system" />
    </springProfile>
    <springProfile name="prod">
        <property name="spring-profile" value="PROD" scope="system" />
    </springProfile>
    <springProfile name="stage">
        <property name="spring-profile" value="STAGE" scope="system" />
    </springProfile>
    <springProfile name="qa">
        <property name="spring-profile" value="QA" scope="system" />
    </springProfile>

    <property name="LOG_PATTERN"
              value="${LOG_PATTERN:-%d{yyyy-MM-dd HH:mm:ss.SSS, Asia/Seoul} %clr(${LOG_LEVEL_PATTERN:-%5p}) - %clr([%X{TRACE_ID}]){magenta} [%thread] %clr([%logger{0}>%method]){cyan} : %msg%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <if condition='isDefined("logging.path")'>
        <then>
            <property name="LOGGING_PATH" value="${logging.path}"/>
        </then>
        <else>
            <if condition='p("spring.profiles.active").equals("local")'>
                <then>
                    <property name="LOGGING_PATH" value="${user.home}/logs/${service}"/>
                </then>
                <else>
                    <property name="LOGGING_PATH" value="${user.home}/logs/${service}"/>
                </else>
            </if>
        </else>
    </if>
    <if condition='p("spring.profiles.active").equals("local") || p("spring.profiles.active").equals("dev") || p("spring.profiles.active").equals("qa")'>
        <then>
            <property name="LOGGER_LEVEL_ROOT" value="DEBUG" />
            <property name="LOGGER_LEVEL_DEFAULT" value="DEBUG" />
        </then>
        <else>
            <property name="LOGGER_LEVEL_ROOT" value="ERROR" />
            <property name="LOGGER_LEVEL_DEFAULT" value="INFO" />
        </else>
    </if>

    <appender name="LOG-CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <appender name="LOG-FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGGING_PATH}/access.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGGING_PATH}/old/access-%d{yyyyMMdd}.log.gz</fileNamePattern>
            <maxHistory>10</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <appender name="ERROR-LOG-FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGGING_PATH}/error.log</file>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGGING_PATH}/error-%d{yyyyMMdd}.log.gz</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!--
    <appender name="AWS_CLOUD_WATCH" class="ca.pjer.logback.AwsLogsAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <layout>
            <pattern>%d{yyyyMMdd'T'HHmmss} [%thread] %level %logger{39} %msg%n%xThrowable</pattern>
        </layout>
        <logGroupName>/LOG/${spring-profile}-EDITHOME_PRO-BACKEND-API</logGroupName>
        <logStreamUuidPrefix>backend-api-${appName}_${DOCKER_TAG}-</logStreamUuidPrefix>
        <logRegion>ap-northeast-2</logRegion>
    </appender>
    -->

    <appender name="AWS_CLOUD_WATCH" class="com.j256.cloudwatchlogbackappender.CloudWatchAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>TRACE</level>
        </filter>
        <layout class="com.j256.cloudwatchlogbackappender.Ec2PatternLayout">
            <pattern>%prop{spring-profile} %prop{appName} [%instanceId] %5level - [%X{TRACE_ID}] [%X{REQUEST_URL}] [%X{CUST_NO}] [%logger{0}] : %msg%n%xThrowable</pattern>
        </layout>
        <region>ap-northeast-2</region>
        <logGroup>/LOG/${spring-profile}-REMODELING-BACKEND-API</logGroup>
        <logStream>backend-api-${appName}_${DOCKER_TAG}-%date{yyyyMMdd,KST}-%uuid</logStream>
    </appender>

    <logger name="java.sql" level="INFO" />
    <logger name="org.apache" level="WARN" />
    <logger name="org.apache.kafka" level="ERROR" />
    <logger name="org.hibernate" level="INFO" />
    <logger name="hibernate" level="INFO" />
    <logger name="io.axoniq.axonserver" level="ERROR" />
    <logger name="org.springframework" level="INFO"/>
    <logger name="org.springframework.web.servlet.DispatcherServlet" level="DEBUG"/>
    <logger name="org.springframework.cache.interceptor.CacheInterceptor" level="TRACE"/>
    <logger name="org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport" level="WARN"/>
    <logger name="_org.springframework.web.servlet.HandlerMapping.Mappings" level="INFO"/>
    <logger name="com.amazonaws" level="INFO"/>
    <logger name="com.amazonaws.util.EC2MetadataUtils" level="ERROR"/>
    <!-- MSA Health Check 수집용 (삭제 금지) -->
    <logger name="io.undertow.request.security" level="DEBUG" additivity="false">
        <appender-ref ref="LOG-CONSOLE"/>
    </logger>
    <logger name="com.zaxxer.hikari" level="WARN"/>
    <logger name="io.lettuce" level="INFO"/>
    <logger name="com.hanssem.remodeling.common.api.repository.client" level="DEBUG"/>

    <root>
        <if condition='p("spring.profiles.active").equals("local")'>
            <then>
                <appender-ref ref="LOG-CONSOLE"/>
            </then>
            <else>
                <if condition='p("spring.profiles.active").equals("dev")'>
                    <then>
                        <appender-ref ref="LOG-CONSOLE"/>
                    </then>
                </if>
                <appender-ref ref="AWS_CLOUD_WATCH"/>
                <appender-ref ref="LOG-FILE"/>
                <appender-ref ref="ERROR-LOG-FILE"/>
            </else>
        </if>
    </root>

</configuration>